#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Dec 18 11:43:46 2021

@author: wangyiren
"""
import numpy as np 
def activation(acti_type,x):
    if acti_type == 'sigmoid':
        return 1/(1+np.exp(-x))
    elif acti_type == 'softmax':
        return np.exp(x) / np.sum(np.exp(x), axis=0)
    else:
        print('wrong type')
class neural_network:
    def __init__(self,network):
        self.weights = []
        self.activations = []
        for layer in network:
            if layer[0] != None:
                input_size = layer[0]
            else:
                input_size = network[network.index(layer)-1][1]
            output_size = layer[1]
            activation = layer[2]
            self.weights.append(np.random.randn(input_size,output_size))
            self.activations.append(activation)
        print(self.weights)
        print(self.activations)
    def propagate(self,data):
        input_data = data
        for i in range(len(self.weights)):
            z = np.dot(input_data,self.weights[i])
            print(self.activations[i])
            a = activation(self.activations[i],z)
            input_data = a
        yhat = a
        return yhat
'''
test = neural_network([[3,5,'sigmoid'],[None,3,'sigmoid'],[None,10,'softmax']])
print(test.propagate([3,5,9]))
'''
test = np.array([[1,2,3],[0,0,2],[0,0,0]])
test_1 = np.nonzero(test)
#for item in test_1
print(test_1[0])
for item in zip(test_1[0],test_1[1]):
    print(item)


